name: Promote

on:
  workflow_dispatch:
    inputs:
      target_stage:
        description: 'Target stage (DEV, PROD)'
        required: true
        type: choice
        default: 'DEV'
        options:
          - DEV
          - PROD
      application_version:
        description: 'Application version (SemVer) to promote (leave empty for latest)'
        required: false
        type: string
  workflow_call:
    inputs:
      target_stage:
        description: 'Target stage (DEV, PROD)'
        required: true
        type: string
      application_version:
        description: 'Application version (SemVer) to promote (leave empty for latest)'
        required: false
        type: string

jobs:
  promote:
    name: Promote
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    permissions:
      contents: read
      id-token: write
    steps:
      - name: "[Setup] Checkout"
        uses: actions/checkout@v4

      - name: "[Setup] Prereqs (jq)"
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq
      - name: Set up JFrog CLI
        uses: EyalDelarea/setup-jfrog-cli@swampUpAppTrust
        env:
          JF_URL: ${{ secrets.JF_URL }}
          # Basic authentication credentials
          JF_USER: ${{ secrets.JF_USER }}
          JF_PASSWORD: ${{ secrets.JF_PASSWORD }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
          JF_GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          version: latest
          oidc-provider-name: github-omriz-poc
          disable-job-summary: true
          disable-auto-build-publish: true
          disable-auto-evidence-collection: false
          
      - name: "[Promote] UNASSIGNED → next"
        env:
          EVIDENCE_PRIVATE_KEY: ${{ secrets.EVIDENCE_PRIVATE_KEY }}
        run: |
          set -euo pipefail
          export JFROG_URL='${{ vars.JFROG_URL }}'
          export PROJECT_KEY='${{ vars.PROJECT_KEY }}'
          source .github/scripts/promote_lib.sh
          fetch_summary
          ALLOW_RELEASE=false
          advance_one_step

      - name: "[Promote] Iterate to target (no release)"
        env:
          EVIDENCE_PRIVATE_KEY: ${{ secrets.EVIDENCE_PRIVATE_KEY }}
        run: |
          set -euo pipefail
          export JFROG_URL='${{ vars.JFROG_URL }}'
          export PROJECT_KEY='${{ vars.PROJECT_KEY }}'
          source .github/scripts/promote_lib.sh
          for i in 1 2 3 4; do
            fetch_summary
            PREV=$(display_stage_for "${CURRENT_STAGE:-UNASSIGNED}")
            echo "➡️ Iteration $i begin: stage=$PREV target=$TARGET_NAME final=$FINAL_STAGE stages=[$STAGES_STR]"
            if [[ "$PREV" == "$TARGET_NAME" ]]; then
              echo "Reached target stage ($TARGET_NAME); stopping."
              break
            fi
            ALLOW_RELEASE=false
            advance_one_step
            fetch_summary
            CURR=$(display_stage_for "${CURRENT_STAGE:-UNASSIGNED}")
            echo "➡️ Iteration $i result: $PREV -> $CURR"
            if [[ "$CURR" == "$PREV" ]]; then
              echo "No further non-release promotions possible; stopping."
              break
            fi
          done


      - name: "[Evidence] Decide STAGING"
        id: decide-staging
        run: |
          set -euo pipefail
          PS="${PROMOTED_STAGES:-}"; CS="${CURRENT_STAGE:-}"; attach="false"
          if echo " $PS " | grep -q " STAGING "; then attach="true"; fi
          if [[ "$CS" == *"-STAGING" || "$CS" == "STAGING" ]]; then attach="true"; fi
          echo "attach=$attach" >> $GITHUB_OUTPUT

      - name: "[Evidence] Prepare STAGING templates"
        if: ${{ steps.decide-staging.outputs.attach == 'true' }}
        run: |
          set -euo pipefail
          cat > iac-evidence.template.md <<'EOF'
          # Snyk IaC Scan

          **Scan Tool:** Snyk IaC  
          **Scan Date:** ${NOW_TS}  
          **Repository:** ${{ github.repository }}  
          **Commit:** ${{ github.sha }}

          ## Summary
          - Critical: 0
          - High: 1
          - Medium: 2
          - Low: 3

          > Infrastructure-as-Code configuration findings for STAGING gate.
          EOF
          cat > pentest-evidence.template.md <<'EOF'
          # Cobalt.io Pentest Summary

          **Engagement ID:** ${ENG_ID}  
          **Completed:** ${NOW_TS}

          ## Findings
          - Total: 1
          - Critical: 0
          - High: 0
          - Medium: 1
          - Low: 0

          > External penetration test summary attached for STAGING gate.
          EOF
          cat > change-approval.template.md <<'EOF'
          # ServiceNow Change Approval

          **Change ID:** ${CHG_ID}  
          **Status:** Approved  
          **Approved By:** ${APPROVER}  
          **Approved At:** ${NOW_TS}

          > Managerial approval for release promotion from STAGING to PROD.
          EOF

      - name: "[Evidence] Attach STAGING"
        if: ${{ steps.decide-staging.outputs.attach == 'true' }}
        run: |
          set -euo pipefail
          if ! command -v envsubst >/dev/null 2>&1; then sudo apt-get update -y && sudo apt-get install -y gettext-base; fi
          export NOW_TS=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          export ENG_ID="ENG-$(( (${GITHUB_RUN_NUMBER:-0} + ${GITHUB_RUN_ATTEMPT:-0}) % 9000 + 1000 ))"
          export CHG_ID="CHG-$(( (${GITHUB_RUN_NUMBER:-0} * 10 + ${GITHUB_RUN_ATTEMPT:-0}) ))"
          export APPROVER="user-${GITHUB_ACTOR}-${GITHUB_RUN_ATTEMPT:-1}"

          cat > iac-evidence.json <<JSON
          {"iacScan": {"tool": "Snyk", "scanDate": "${NOW_TS}", "summary": { "critical": 0, "high": 1, "medium": 2, "low": 3 }, "repository": "${{ github.repository }}", "commit": "${{ github.sha }}"}}
          JSON
          envsubst < iac-evidence.template.md > iac-evidence.md
          jf evd create-evidence --predicate iac-evidence.json --markdown iac-evidence.md --predicate-type "https://snyk.io/evidence/iac/v1" --release-bundle "$APPLICATION_KEY" --release-bundle-version "$APP_VERSION" --project "${{ vars.PROJECT_KEY }}" --key "${{ secrets.EVIDENCE_PRIVATE_KEY }}" --key-alias "${{ vars.EVIDENCE_KEY_ALIAS }}" || echo "⚠️ IaC evidence attachment failed"

          cat > pentest-evidence.json <<JSON
          {"pentest": {"provider": "Cobalt.io", "engagementId": "${ENG_ID}", "completedAt": "${NOW_TS}", "summary": { "totalFindings": 1, "critical": 0, "high": 0, "medium": 1, "low": 0 }}}
          JSON
          envsubst < pentest-evidence.template.md > pentest-evidence.md
          jf evd create-evidence --predicate pentest-evidence.json --markdown pentest-evidence.md --predicate-type "https://cobalt.io/evidence/pentest/v1" --release-bundle "$APPLICATION_KEY" --release-bundle-version "$APP_VERSION" --project "${{ vars.PROJECT_KEY }}" --key "${{ secrets.EVIDENCE_PRIVATE_KEY }}" --key-alias "${{ vars.EVIDENCE_KEY_ALIAS }}" || echo "⚠️ Pentest evidence attachment failed"

          cat > change-approval.json <<JSON
          {"changeRequest": {"id": "${CHG_ID}", "status": "approved", "approvedBy": "${APPROVER}", "approvedAt": "${NOW_TS}", "environment": "STAGING"}}
          JSON
          envsubst < change-approval.template.md > change-approval.md
          jf evd create-evidence --predicate change-approval.json --markdown change-approval.md --predicate-type "https://servicenow.com/evidence/change-req/v1" --release-bundle "$APPLICATION_KEY" --release-bundle-version "$APP_VERSION" --project "${{ vars.PROJECT_KEY }}" --key "${{ secrets.EVIDENCE_PRIVATE_KEY }}" --key-alias "${{ vars.EVIDENCE_KEY_ALIAS }}" || echo "⚠️ Change approval evidence attachment failed"

      - name: "[Setup] Ensure release repos exist"
        run: |
          set -euo pipefail
          JF_URL='${{ vars.JFROG_URL }}'
          TOKEN="$APPTRUST_ACCESS_TOKEN"
          PROJECT='${{ vars.PROJECT_KEY }}'
          # Derive service name from APPLICATION_KEY set earlier
          SERVICE_NAME="${APPLICATION_KEY#${PROJECT}-}"
          DOCKER_REPO="${PROJECT}-${SERVICE_NAME}-internal-docker-release-local"
          GENERIC_REPO="${PROJECT}-${SERVICE_NAME}-internal-generic-release-local"
          echo "Ensuring repos exist: $DOCKER_REPO, $GENERIC_REPO"
          repo_exists() {
            local repo_key="$1"
            curl -sS -H "Authorization: Bearer ${TOKEN}" -H "Accept: application/json" \
              -H "X-JFrog-Project: ${PROJECT}" \
              "$JF_URL/artifactory/api/repositories" | jq -e --arg k "$repo_key" '.[] | select(.key == $k) | .key' >/dev/null 2>&1
          }
          create_repo() {
            local repo_key="$1"; local pkg="$2"
            local body
            if [[ "$pkg" == "docker" ]]; then
              body='{"rclass":"local","packageType":"docker","dockerApiVersion":"V2","environments":["PROD"],"blackedOut":false,"xrayIndex":false}'
            else
              body='{"rclass":"local","packageType":"generic","environments":["PROD"],"blackedOut":false,"xrayIndex":false}'
            fi
            echo "Creating $repo_key (packageType=$pkg)"
            curl -sS -L -X PUT "$JF_URL/artifactory/api/repositories/$repo_key" \
              -H "Authorization: Bearer ${TOKEN}" -H "X-JFrog-Project: ${PROJECT}" -H "Content-Type: application/json" -d "$body" | cat
          }
          patch_envs() {
            local repo_key="$1"
            echo "Patching $repo_key environments via v2 API"
            local resp
            resp=$(curl -sS -L -w '\n%{http_code}' -X PATCH "$JF_URL/artifactory/api/v2/repositories/$repo_key" \
              -H "Authorization: Bearer ${TOKEN}" -H "X-JFrog-Project: ${PROJECT}" -H "Content-Type: application/json" \
              -d '{"environments":["PROD"],"blackedOut":false}')
            local body="${resp%$'\n'*}"; local code="${resp##*$'\n'}"
            echo "$body" | cat
            echo "HTTP $code"
            if [[ "$code" -ge 200 && "$code" -lt 300 ]]; then return 0; fi
            echo "v2 PATCH failed (HTTP $code). Falling back to v1 POST update"
            local cfg="$(mktemp)"; local upd
            local get_code
            get_code=$(curl -sS -L -o "$cfg" -w "%{http_code}" -H "Authorization: Bearer ${TOKEN}" -H "X-JFrog-Project: ${PROJECT}" -H "Accept: application/json" "$JF_URL/artifactory/api/repositories/$repo_key" || echo 000)
            if [[ "$get_code" -ge 200 && "$get_code" -lt 300 ]]; then
              upd=$(jq -c '.environments = ["PROD"] | .blackedOut = false' "$cfg")
            else
              echo "WARN: failed to fetch current config for $repo_key (HTTP $get_code). Posting minimal config."
              if [[ "$repo_key" == *"-docker-"* ]]; then
                upd='{"rclass":"local","packageType":"docker","dockerApiVersion":"V2","environments":["PROD"],"blackedOut":false}'
              else
                upd='{"rclass":"local","packageType":"generic","environments":["PROD"],"blackedOut":false}'
              fi
            fi
            rm -f "$cfg"
            curl -sS -L -X POST "$JF_URL/artifactory/api/repositories/$repo_key" \
              -H "Authorization: Bearer ${TOKEN}" -H "X-JFrog-Project: ${PROJECT}" -H "Content-Type: application/json" -d "$upd" | cat
          }
          ensure_repo_and_envs() {
            local repo_key="$1"; local pkg="$2"
            if repo_exists "$repo_key"; then
              echo "$repo_key exists"
            else
              create_repo "$repo_key" "$pkg"
            fi
            patch_envs "$repo_key" || true
          }
          ensure_repo_and_envs "$GENERIC_REPO" generic
          ensure_repo_and_envs "$DOCKER_REPO" docker
          # Generic release repo
          CODE=$(curl -sS -o /dev/null -w "%{http_code}" -H "Authorization: Bearer ${TOKEN}" -H "Accept: application/json" "$JF_URL/artifactory/api/repositories/$GENERIC_REPO" || echo 000)
          if [[ "$CODE" -eq 404 ]]; then
            echo "Creating $GENERIC_REPO"
            curl -sS -L -X PUT "$JF_URL/artifactory/api/repositories/$GENERIC_REPO" \
              -H "Authorization: Bearer ${TOKEN}" -H "Content-Type: application/json" \
              -d '{"rclass":"local","packageType":"generic","environments":["PROD"],"blackedOut":false,"xrayIndex":false}' | cat
          else
            echo "$GENERIC_REPO exists (HTTP $CODE)"
            echo "Patching $GENERIC_REPO environments to [PROD] and un-blackout via v2 API"
            curl -sS -L -X PATCH "$JF_URL/artifactory/api/v2/repositories/$GENERIC_REPO" \
              -H "Authorization: Bearer ${TOKEN}" -H "Content-Type: application/json" \
              -d '{"environments":["PROD"],"blackedOut":false}' | cat
          fi
          # Docker release repo
          CODE=$(curl -sS -o /dev/null -w "%{http_code}" -H "Authorization: Bearer ${TOKEN}" -H "Accept: application/json" "$JF_URL/artifactory/api/repositories/$DOCKER_REPO" || echo 000)
          if [[ "$CODE" -eq 404 ]]; then
            echo "Creating $DOCKER_REPO"
            curl -sS -L -X PUT "$JF_URL/artifactory/api/repositories/$DOCKER_REPO" \
              -H "Authorization: Bearer ${TOKEN}" -H "Content-Type: application/json" \
              -d '{"rclass":"local","packageType":"docker","dockerApiVersion":"V2","environments":["PROD"],"blackedOut":false,"xrayIndex":false}' | cat
          else
            echo "$DOCKER_REPO exists (HTTP $CODE)"
            echo "Patching $DOCKER_REPO environments to [PROD] and un-blackout via v2 API"
            curl -sS -L -X PATCH "$JF_URL/artifactory/api/v2/repositories/$DOCKER_REPO" \
              -H "Authorization: Bearer ${TOKEN}" -H "Content-Type: application/json" \
              -d '{"environments":["PROD"],"blackedOut":false}' | cat
          fi

      - name: "[Release] PROD"
        env:
          EVIDENCE_PRIVATE_KEY: ${{ secrets.EVIDENCE_PRIVATE_KEY }}
          EVIDENCE_KEY_ALIAS: ${{ vars.EVIDENCE_KEY_ALIAS }}
        run: |
          set -euo pipefail
          export JFROG_URL="${{ vars.JFROG_URL }}"; export PROJECT_KEY="${{ vars.PROJECT_KEY }}"; source .github/scripts/promote_lib.sh
          fetch_summary
          # Include Docker + Generic release repos to satisfy all package types
          # Derive service name from APPLICATION_KEY (e.g., bookverse-checkout -> checkout)
          if [[ -n "${APPLICATION_KEY:-}" && -n "${PROJECT_KEY:-}" ]]; then
            svc_name="${APPLICATION_KEY#${PROJECT_KEY}-}"
            docker_repo="${PROJECT_KEY}-${svc_name}-internal-docker-release-local"
            generic_repo="${PROJECT_KEY}-${svc_name}-internal-generic-release-local"
            export RELEASE_INCLUDED_REPO_KEYS=$(printf '["%s","%s"]' "$docker_repo" "$generic_repo")
          fi
          if [[ "$(display_stage_for "${CURRENT_STAGE:-}")" == "STAGING" ]]; then
            ALLOW_RELEASE=true
            advance_one_step
          else
            echo "Skipping release: current stage is $(display_stage_for "${CURRENT_STAGE:-UNASSIGNED}")"
          fi

      - name: "[Tags] Enforce PROD 'latest' invariants"
        run: |
          set -euo pipefail
          if ! command -v jq >/dev/null 2>&1; then sudo apt-get update -y && sudo apt-get install -y jq; fi
          APP_KEY="$APPLICATION_KEY"
          BASE="${{ vars.JFROG_URL }}/apptrust/api/v1"
          TOKEN="$APPTRUST_ACCESS_TOKEN"
          RESP=$(mktemp)
          code=$(curl -sS -L -o "$RESP" -w "%{http_code}" \
            "$BASE/applications/$APP_KEY/versions?limit=1000&order_by=created&order_asc=false" \
            -H "Authorization: Bearer $TOKEN" -H "Accept: application/json" || echo 000)
          if [[ "$code" -lt 200 || "$code" -ge 300 ]]; then
            echo "❌ Failed to list versions (HTTP $code)" >&2; cat "$RESP" || true; exit 1
          fi
          DESIRED=$(jq -r '[.versions[] | select((.release_status|tostring|ascii_upcase)=="RELEASED" or (.release_status|tostring|ascii_upcase)=="TRUSTED_RELEASE") | .version] | unique | map(select(test("^[0-9]+\\.[0-9]+\\.[0-9]+$"))) | sort_by(split(".")|map(tonumber)) | last // empty' "$RESP")
          if [[ -z "$DESIRED" ]]; then
            mapfile -t PREV_LATEST < <(jq -r '.versions[] | select(.tag=="latest") | .version' "$RESP")
            for pv in "${PREV_LATEST[@]:-}"; do
              [ -z "$pv" ] && continue
              restore=$(jq -r --arg v "$pv" '.versions[] | select(.version==$v) | (.properties.original_tag_before_latest[0] // .version // "")' "$RESP")
              printf '{"tag":"%s","delete_properties":["original_tag_before_latest"]}' "$restore" > body.json
              curl -sS -L -X PATCH "$BASE/applications/$APP_KEY/versions/$pv" -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/json" -d @body.json | cat
            done
            rm -f "$RESP" body.json
            exit 0
          fi
          CURR_TAG=$(jq -r --arg v "$DESIRED" '.versions[] | select(.version==$v) | (.tag // "")' "$RESP")
          jq -n --arg ct "$CURR_TAG" '{tag:"latest", properties:{original_tag_before_latest:[$ct]}}' > body.json
          curl -sS -L -X PATCH "$BASE/applications/$APP_KEY/versions/$DESIRED" -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/json" -d @body.json | cat
          mapfile -t OTHERS < <(jq -r --arg v "$DESIRED" '.versions[] | select(.tag=="latest" and .version!=$v) | .version' "$RESP")
          for ov in "${OTHERS[@]:-}"; do
            [ -z "$ov" ] && continue
            restore=$(jq -r --arg v "$ov" '.versions[] | select(.version==$v) | (.properties.original_tag_before_latest[0] // .version // "")' "$RESP")
            printf '{"tag":"%s","delete_properties":["original_tag_before_latest"]}' "$restore" > body.json
            curl -sS -L -X PATCH "$BASE/applications/$APP_KEY/versions/$ov" -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/json" -d @body.json | cat
          done
          rm -f "$RESP" body.json || true

      - name: "[Summary] Promotion"
        if: always()
        run: |
          set -euo pipefail
          CURRENT_DISPLAY="${CURRENT_STAGE_BEFORE:-UNASSIGNED}"
          CURRENT_DISPLAY="${CURRENT_DISPLAY#bookverse-}"
          TARGET_DISPLAY="${TARGET_NAME:-${FINAL_STAGE:-UNKNOWN}}"
          export CURRENT_DISPLAY TARGET_DISPLAY
          STAGES="${STAGES_STR:-DEV QA STAGING PROD}"
          IFS=' ' read -r -a STAGE_ARR <<< "$STAGES"
          idx_current=-1; idx_target=-1
          for i in "${!STAGE_ARR[@]}"; do
            if [[ "${STAGE_ARR[$i]}" == "$CURRENT_DISPLAY" ]]; then idx_current=$i; fi
            if [[ "${STAGE_ARR[$i]}" == "$TARGET_DISPLAY" ]]; then idx_target=$i; fi
          done
          pre=""; post=""; sep=""
          if [[ $idx_current -ge 0 && $idx_target -ge 0 ]]; then
            for ((j=0;j<idx_current;j++)); do
              if [[ -n "$pre" ]]; then sep=" → "; else sep=""; fi
              pre+="$sep${STAGE_ARR[$j]}"
            done
            for ((j=idx_target+1;j<${#STAGE_ARR[@]};j++)); do
              if [[ -n "$post" ]]; then sep=" → "; else sep=""; fi
              post+="$sep${STAGE_ARR[$j]}"
            done
            LC_PATH="${pre:+$pre → }**${CURRENT_DISPLAY} ➔ ${TARGET_DISPLAY}**${post:+ → $post}"
          else
            LC_PATH="$STAGES"
          fi
          OUTCOME="SUCCESS"
          for s in "${PROMO_UNASSIGNED_STATUS:-}" "${PROMO_DEV_STATUS:-}" "${PROMO_QA_STATUS:-}" "${PROMO_STAGING_STATUS:-}" "${PROMO_RELEASE_STATUS:-}"; do
            if [[ "$s" == "FAILED" ]]; then OUTCOME="FAILURE"; fi
          done
          if [[ "$OUTCOME" == "SUCCESS" ]]; then
            for s in "${IAC_EVIDENCE_STATUS:-}" "${PENTEST_EVIDENCE_STATUS:-}" "${CHANGEAPPROVAL_EVIDENCE_STATUS:-}"; do
              if [[ "$s" == "FAILED" ]]; then OUTCOME="WARNING"; fi
            done
          fi
          PROMOTION_METHOD="move"
          node - <<'NODE' | tee -a "$GITHUB_STEP_SUMMARY" >/dev/null
          (function(){
            function iconFor(status){
              switch ((status||'').toUpperCase()) {
                case 'SUCCESS': return '✅';
                case 'WARNING': return '⚠️';
                case 'FAILURE': return '❌';
                case 'FAILED': return '❌';
                default: return '–';
              }
            }
            const env = process.env;
            const app = env.APPLICATION_KEY || '';
            const ver = env.APP_VERSION || '';
            const current = env.CURRENT_DISPLAY || '';
            const target = env.TARGET_DISPLAY || '';
            const lifecycleDefined = `UNASSIGNED → ${(env.STAGES_STR || 'DEV QA STAGING PROD').split(' ').join(' → ')}`;
            const promoMethod = (env.PROMOTION_METHOD || 'move');
            const sUnassigned = (env.PROMO_UNASSIGNED_STATUS || '').toUpperCase();
            const sDev = (env.PROMO_DEV_STATUS || '').toUpperCase();
            const sQa = (env.PROMO_QA_STATUS || '').toUpperCase();
            const sStg = (env.PROMO_STAGING_STATUS || '').toUpperCase();
            const sRel = (env.PROMO_RELEASE_STATUS || '').toUpperCase();
            const evIac = (env.IAC_EVIDENCE_STATUS || '').toUpperCase();
            const evPentest = (env.PENTEST_EVIDENCE_STATUS || '').toUpperCase();
            const evChange = (env.CHANGEAPPROVAL_EVIDENCE_STATUS || '').toUpperCase();
            function stepOutcomeFromPlatform(stepStatus){
              const st = (stepStatus||'').toUpperCase();
              if (st === 'FAILED' || st === 'FAILURE') return 'FAILURE';
              if (!st) return 'SKIPPED';
              return 'SUCCESS';
            }
            function evidenceLine(name, status, hint){
              const up = (status||'').toUpperCase();
              if (up === 'FAILED') return `  - ❌ ${name} (failed)`;
              if (up === 'SUCCESS') return `  - ✅ ${name}`;
              return `  - ${name} (${hint || 'not evaluated'})`;
            }
            function stepSection(from, to, kind, constraints, evidences, stepStatus){
              const promoResult = stepOutcomeFromPlatform(stepStatus);
              const hasEvidenceFail = evidences.some(e => (e.status||'').toUpperCase() === 'FAILED');
              const stepOutcome = promoResult === 'FAILURE' ? 'FAILURE' : (hasEvidenceFail ? 'WARNING' : 'SUCCESS');
              const lines = [];
              lines.push(`### Step: ${from} → ${to}`);
              lines.push(`- **Type:** ${kind}`);
              lines.push(`- **Constraints:** ${constraints || 'None'}`);
              lines.push(`- **Evidence Used:**`);
              if (!evidences.length) { lines.push(`  - (none)`); } else { evidences.forEach(e => lines.push(evidenceLine(e.name, e.status, e.hint))); }
              lines.push(`- **Promotion Result:** ${iconFor(promoResult)} ${promoResult}`);
              lines.push(`- **Step Outcome:** ${iconFor(stepOutcome)} ${stepOutcome}`);
              return { text: lines.join('\n'), outcome: stepOutcome };
            }
            const sec1 = stepSection('UNASSIGNED','DEV',`Promote (${promoMethod})`, 'None', [
              { name: 'SLSA Provenance (UNASSIGNED)', status: '', hint: 'attached in CI; not evaluated here' },
              { name: 'Jira Release Notes (UNASSIGNED)', status: '', hint: 'attached in CI; not evaluated here' },
            ], sUnassigned);
            const sec2 = stepSection('DEV','QA',`Promote (${promoMethod})`, 'None', [
              { name: 'Coverage (pytest) [Package]', status: '', hint: 'attached in CI; not evaluated here' },
              { name: 'SAST (Checkmarx) [Package]', status: '', hint: 'attached in CI; not evaluated here' },
            ], sDev);
            const sec3 = stepSection('QA','STAGING',`Promote (${promoMethod})`, 'None', [
              { name: 'DAST (Invicti)', status: '', hint: 'not configured in this workflow' },
              { name: 'API Tests (Postman)', status: '', hint: 'not configured in this workflow' },
            ], sQa);
            const sec4 = stepSection('STAGING','PROD',`Release (${promoMethod})`, 'None', [
              { name: 'Snyk IaC', status: evIac },
              { name: 'Cobalt Pentest', status: evPentest },
              { name: 'ServiceNow Change Approval', status: evChange },
            ], sRel);
            const outcomes = [sec1.outcome, sec2.outcome, sec3.outcome, sec4.outcome].filter(Boolean);
            let overall = 'SUCCESS';
            if (outcomes.some(o => o === 'FAILURE')) overall = 'FAILURE';
            else if (outcomes.some(o => o === 'WARNING')) overall = 'WARNING';
            const exec = [
              `### Executive Summary`,
              `- **Lifecycle:** ${lifecycleDefined}`,
              `- **Application:** ${app}`,
              `- **Version:** ${ver}`,
              `- **From → To:** ${current} → ${target}`,
              `- **Outcome:** ${iconFor(overall)} ${overall}`,
            ].join('\n');
            const report = [exec, '', sec1.text, '', sec2.text, '', sec3.text, '', sec4.text].join('\n');
            process.stdout.write(report);
          })();
          NODE
